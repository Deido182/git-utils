#!/usr/bin/env bash

while getopts "m:r:w:p:" opt; do
  case "${opt}" in
  m) export new_message="${OPTARG}" ;;
  r) export replace="${OPTARG}" ;; # As basic regex
  w) export with="${OPTARG}" ;;
  p) export replace="^"
     export with="${OPTARG}" ;;
  esac
done
shift $((OPTIND - 1))

if [[ ! -z "${new_message}" ]] && [[ ! -z "${replace}" ]]; then
  print_error "Both -m and -r (or -p) options are present"
  exit 1
fi

. "$( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}" )" &> /dev/null && pwd )/libs/common-functions-and-constants"

raw_refs=$@
IFS=$'\n'
rev_list=($(git rev-list HEAD))
unset IFS
indexes=()

for ref in ${raw_refs[@]}; do
  toks=()
  split "${ref}" ".." toks
  index0=$(index_of rev_list "$(git rev-parse ${toks[0]})")
  if [[ ${#toks[@]} > 1 ]]; then
    index1=$(index_of rev_list "$(git rev-parse ${toks[1]})")
  fi
  if [[ ! -z ${index1} && ${index0} != ${index1} ]]; then
    if [[ ${index0} < ${index1} ]]; then
      print_error "'${ref}' is not a valid range"
      exit 1
    fi
    indexes+=($(seq ${index1} 1 $((${index0}-1))))
    unset index1
  fi
  indexes+=(${index0})
done

move_here() {
  git cherry-pick \
    --allow-empty \
    --allow-empty-message \
    --keep-redundant-commits \
    "$1"
}

drop_duplicates indexes
sort_array -nr indexes

initial_branch="$(git rev-parse --abbrev-ref HEAD)"
tmp_branch="_changemessage-tmp-branch-${RANDOM}"
detach_from="${rev_list[indexes[0]]}^"
git checkout "${detach_from}" -b "${tmp_branch}"

i=0
for j in $(seq ${indexes[0]} -1 0); do
  ref="${rev_list[j]}"
  move_here "${ref}"

  if [[ -z "${tmp_branch_first}" ]]; then 
    tmp_branch_first="$(git rev-parse HEAD)"
  fi

  if [[ ${j} != ${indexes[i]} ]]; then
    continue
  fi

  if [[ ! -z "${replace}" ]]; then 
    new_message="$(git show --pretty=format:"%B" --no-patch ${ref} | sed 's|'"${replace}"'|'"${with}"'|g')"
  fi
  
  git commit --amend --allow-empty --no-edit -m "${new_message}"
  i=$((${i}+1))
done

git checkout "${initial_branch}"
git reset --hard "${detach_from}"

move_here "${tmp_branch_first}..${tmp_branch}"

git branch -D "${tmp_branch}"