#!/usr/bin/env -S bash -i

features=()
urls=()
multithreading_enabled=false
pids=()
while getopts "n:u:m" opt; do
	case "${opt}" in
	n) features+=("feature/${OPTARG}") ;;
	u) urls+=("${OPTARG}") ;;
	m) multithreading_enabled=true ;;
	esac
done
shift $((OPTIND - 1))

into="$1"

. "$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/libs/common-functions-and-constants"

print_does_not_exist() {
	print_warning "'$1' does not exist in '$2'"
}

if [[ "${into}" == "" ]]; then
	print_error "No destination branch specified: into which one?"
	exit 1
fi

if [[ ${#features[@]} == 0 ]]; then
	print_warning "No feature name specified"
	exit 0
fi

if [[ ${#urls[@]} == 0 ]]; then
	print_warning "No repository (url) specified"
	exit 0
fi

i=0
curr_dir="$(pwd)"
repo="${tmp_dir}/aremergedinto-repo"
create_repo "${repo}" > /dev/null 2>&1
cd "${repo}"
for url in ${urls[@]}; do
	origin="origin-$((i++))"
	git remote add --no-tags "${origin}" "${url}"
done
# Fetch all at once
git remote update > /dev/null

check_remote() {
	local origin="$1"
	local url=$(git remote get-url "${origin}")
	if [[ $(git rev-parse --verify "${origin}/master" 2> /dev/null) == "" ]]; then
		print_error "'${url}' either cannot be accessed or does not exist"
		return
	fi
	if [[ $(git rev-parse --verify "${origin}/${into}" 2> /dev/null) == "" ]]; then
		print_does_not_exist "${into}" "${url}"
		return
	fi
	for feature in ${features[@]}; do
		if [[ $(git rev-parse --verify "${origin}/${feature}" 2> /dev/null) == "" ]]; then
			print_does_not_exist "${feature}" "${url}"
			continue
		fi
		ans=$(git ismergedinto -b "${origin}/${feature}" "${origin}/${into}")
		if [[ "${ans}" == "true" ]]; then
			print_success "'${url}': '${feature}' is merged into '${into}'"
		else
			print_error "'${url}': '${feature}' is not merged into '${into}'"
		fi
	done
}

remotes=$(git remote)
for origin in ${remotes[@]}; do
	if [[ ${multithreading_enabled} == true ]]; then
		check_remote "${origin}" &
		pids+=($!)
	else
		check_remote "${origin}"
	fi
done

if [[ ${multithreading_enabled} == true ]]; then
	wait ${pids[@]}
fi

cd "${curr_dir}"
remove_repo "${repo}" > /dev/null 2>&1
