#!/usr/bin/env bash

containerized=false
while getopts "c" opt; do
  case "${opt}" in
  c) containerized=true ;;
  esac
done
shift $((OPTIND - 1))

root_dir="$(git rev-parse --show-toplevel)"
tests_dir="${root_dir}/tests"

git submodule add https://github.com/bats-core/bats-core.git ${tests_dir}/bats >/dev/null 2>&1
git submodule add https://github.com/bats-core/bats-support.git ${tests_dir}/test_helper/bats-support >/dev/null 2>&1
git submodule add https://github.com/bats-core/bats-assert.git ${tests_dir}/test_helper/bats-assert >/dev/null 2>&1
git submodule update --init >/dev/null 2>&1

root_dir="$(git rev-parse --show-toplevel)"

# For mocks
mkdir "${root_dir}/tests/.repos" >/dev/null 2>&1

if [[ "${containerized}" == "true" ]]; then
    echo "Running tests with containerized-commands"
    export PATH="${root_dir}/containerized-commands:$PATH"
else
    export PATH="${root_dir}/containerized-commands/container-context/commands:$PATH"
    which bash > /dev/null
    if [[ $? != 0 ]]; then
        echo "ERROR: no 'bash' version installed"
        exit 1
    fi

    bash_version=$(bash --version 2> /dev/null | head -n 1)
    echo "'bash' version the commands will be run and tested with:"
    echo "${bash_version}"
fi

${tests_dir}/bats/bin/bats ${tests_dir}
