#!/usr/bin/env bash

tmp_dir="/tmp"
installed_commands_basename=installed-commands
red_text='\033[0;31m'
green_text='\033[0;32m'
yellow_text='\033[0;33m'
default_text='\033[0m'

print_coloured() {
	echo -e "$1$2${default_text}"
}

print_warning() {
	print_coloured "${yellow_text}" "WARNING: $1"
}

print_error() {
	print_coloured "${red_text}" "ERROR: $1"
}

print_success() {
	print_coloured "${green_text}" "$1"
}

remove_repo() {
    if [ -d "$1" ]; then
        yes | rm -r $1
    fi
}

create_repo() {
    [[ -z "$2" ]] && name="default user" || name="$2"
    [[ -z "$3" ]] && email="default email" || email="$3"
    remove_repo "$1"
    mkdir -p "$1" &&
        cd "$1" &&
        git init &&
        git config --local user.name "${name}" &&
        git config --local user.email "${email}" &&
        git commit -m "initial commit" --allow-empty # Necessary for HEAD
    if [[ "$(git rev-parse --abbrev-ref HEAD)" != "master" ]]; then
      git branch -m master
    fi
}

# Simply 'echo' an array would not work, due to possible spaces in elements
# As references are implemented by "names", those inside the functions must not
# override those outside

split() {
    local _split_str="$1"
    local _split_sep="$2"
    local _split_output_arr_name=$3
    local _split_str_len=${#_split_str}
    local _split_sep_len=${#_split_sep}
    local _split_first_in=0
    local _split_j=0
    for _split_i in $(seq ${_split_sep_len} 1 ${_split_str_len}); do
        local _split_last_in=$((${_split_i}-${_split_sep_len}))
        if [[ "${_split_str:_split_last_in+1:_split_sep_len}" == "${_split_sep}" ]]; then
            eval ${_split_output_arr_name}[${_split_j}]="\"${_split_str:_split_first_in:_split_last_in-_split_first_in+1}\""
            _split_j=$((${_split_j}+1))
            _split_first_in=$((${_split_i}+1))
        fi
    done
    if [[ ${_split_first_in} != $((${_split_str_len}+1)) ]]; then
        eval ${_split_output_arr_name}[${_split_j}]="\"${_split_str:_split_first_in:_split_str_len-_split_first_in+1}\""
    fi
}

require_confirmation() {
    echo "$1"
    echo "Do you want to continue?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) return 0 ;;
            No ) return 1 ;;
        esac
    done
}

expand() {
  local _expand_input_arr_name=$1
  local _expand_input_arr_len=$(eval echo '${#'${_expand_input_arr_name}'[@]}')
  for _expand_i in $(seq 0 1 $((${_expand_input_arr_len}-1))); do
    echo "$(eval echo '${'${_expand_input_arr_name}'['${_expand_i}']}')"
  done
}

clone_into() {
  local _clone_into_input_arr_name=$1
  local _clone_into_output_arr_name=$2
  eval 'unset '${_clone_into_output_arr_name}
  IFS=$'\n'
  local _clone_into_arr=($(expand ${_clone_into_input_arr_name}))
  unset IFS
  for _clone_into_i in $(seq 0 1 $((${#_clone_into_arr[@]}-1))); do
    eval ${_clone_into_output_arr_name}[${_clone_into_i}]="\"${_clone_into_arr[_clone_into_i]}\""
  done
}

# In-place
sort_array() {
  OPTIND=1
  local sort_opt=""
  while getopts "nr" opt; do
    sort_opt="${sort_opt}${opt}"
  done
  [[ ${sort_opt} != "" ]] && sort_opt="-${sort_opt}"
  shift $((OPTIND - 1))
  local _sort_array_arr_name=$1
  IFS=$'\n'
  sort_array_tmp_file="${tmp_dir}/sort_array-tmp-file"
  expand ${_sort_array_arr_name} > "${sort_array_tmp_file}"
  _sort_array_sorted=($(sort ${sort_opt} -f "${sort_array_tmp_file}"))
  rm "${sort_array_tmp_file}"
  unset IFS
  clone_into _sort_array_sorted "${_sort_array_arr_name}"
}

# In-place
drop_duplicates() {
  local _drop_duplicates_arr_name=$1
  sort_array "${_drop_duplicates_arr_name}"
  IFS=$'\n'
  local _drop_duplicates_arr=($(expand ${_drop_duplicates_arr_name}))
  unset IFS
  local _drop_duplicates_out=("${_drop_duplicates_arr[0]}")
  for _drop_duplicates_i in $(seq 1 1 $((${#_drop_duplicates_arr[@]}-1))); do
    if [[ "${_drop_duplicates_arr[_drop_duplicates_i]}" == "${_drop_duplicates_arr[_drop_duplicates_i-1]}" ]]; then
      continue
    fi
    _drop_duplicates_out+=("${_drop_duplicates_arr[_drop_duplicates_i]}")
  done
  clone_into _drop_duplicates_out "${_drop_duplicates_arr_name}"
}

index_of() {
  local _index_of_arr_name=$1
  IFS=$'\n'
  local _index_of_arr=($(expand ${_index_of_arr_name}))
  unset IFS
  local el="$2"
  for _index_of_i in $(seq 0 1 $((${#_index_of_arr[@]}-1))); do
    if [[ "${el}" == "${_index_of_arr[_index_of_i]}" ]]; then
      echo $_index_of_i
      return 0
    fi
  done
  echo -1
}
